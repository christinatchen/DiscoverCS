#BlueJ class context
comment0.target=AdjListsGraphPlus
comment0.text=\ DO\ NOT\ MODIFY\ THE\ CONSTRUCTORS\ AND\ THE\ FIRST\ METHOD\ ******************\r\n\ The\ methods\ you\ will\ implement\ follow\ below.\r\n\ \ @author\ CS230\ Staff\ (of\ the\ three\ first\ methods)\r\n\ \ @author\ Maura\ Shea\r\n\ \ @version\ 2018.04.19\r\n
comment1.params=
comment1.target=AdjListsGraphPlus()
comment1.text=\r\n\ Construct\ an\ empty\ graph.\r\n
comment10.params=vertex
comment10.target=boolean\ isIsolated(java.lang.Object)
comment10.text=\r\n\ Checks\ if\ a\ vertex\ is\ isolated\ -\ \r\n\ i.e.,\ no\ vertices\ point\ to\ it\ and\ it\ points\ to\ no\ vertices.\r\n\ \r\n\ @param\ \ vertex\ \ The\ vertex\ to\ check\ for\ isolation.\r\n\ @return\ True\ if\ the\ vertex\ is\ isolated,\ false\ if\ it\ is\ not.\r\n\ @throws\ IllegalArgumentException\ if\ given\ vertex\ is\ not\ in\ graph.\r\n
comment11.params=vertex
comment11.target=java.util.LinkedList\ dfsTraversal(java.lang.Object)
comment11.text=\r\n\ Returns\ a\ LinkedList\ contining\ a\ DEPTH\ first\ search\ traversal,\ \ \r\n\ starting\ at\ the\ given\ vertex.\ \r\n\ If\ the\ vertex\ is\ not\ valid,\ it\ returns\ an\ empty\ list.\r\n\ \r\n\ @param\ \ vertex\ \ The\ starting\ vertex.\ \r\n\ @return\ \ A\ linked\ list\ with\ the\ vertices\ in\ depth-first\ order.\r\n
comment12.params=vertex
comment12.target=javafoundations.ArrayIterator\ dfsTraversalIter(java.lang.Object)
comment12.text=\r\n\ Returns\ an\ iterator\ contining\ a\ DEPTH\ first\ search\ traversal\ \r\n\ starting\ at\ the\ given\ vertex.\ \r\n\ If\ the\ vertex\ is\ not\ valid,\ it\ returns\ an\ empty\ iterator.\r\n\ \r\n\ @param\ \ vertex\ \ The\ starting\ vertex.\ \r\n\ @return\ An\ ArrayIterator<T>\ with\ the\ vertices\ in\ depth-first\ order\r\n
comment13.params=vertex
comment13.target=java.util.LinkedList\ bfsTraversal(java.lang.Object)
comment13.text=\r\n\ Returns\ a\ LinkedList\ contining\ a\ BREADTH\ first\ search\ traversal\ \r\n\ starting\ at\ the\ given\ vertex.\r\n\ If\ the\ vertex\ is\ not\ valid,\ it\ returns\ an\ empty\ list.\ \r\n\ \r\n\ @param\ \ vertex\ \ The\ starting\ vertex.\ \ \r\n\ @return\ A\ linked\ list\ with\ the\ vertices\ in\ breadth-first\ order.\r\n
comment14.params=vertex
comment14.target=javafoundations.ArrayIterator\ bfsTraversalIter(java.lang.Object)
comment14.text=\r\n\ Returns\ an\ iterator\ contining\ a\ BREADTH\ first\ search\ traversal\ \r\n\ starting\ at\ the\ given\ vertex.\ \r\n\ If\ the\ vertex\ is\ not\ valid,\ it\ returns\ an\ empty\ iterator.\r\n\r\n\ @param\ \ vertex\ \ The\ starting\ vertex.\ \r\n\ @return\ An\ ArrayIterator<T>\ with\ the\ vertices\ in\ breadth-first\ order.\r\n
comment15.params=
comment15.target=java.util.Vector\ getVertices()
comment2.params=original
comment2.target=AdjListsGraphPlus(AdjListsGraphPlus)
comment2.text=\r\n\ Construct\ a\ graph\ with\ the\ same\ vertices\ and\ edges\ as\ the\ given\ original.\r\n\ @param\ original\r\n
comment3.params=original
comment3.target=AdjListsGraphPlus(AdjListsGraph)
comment4.params=tgfFile
comment4.target=AdjListsGraphPlus\ fromTGF(java.lang.String)
comment4.text=\r\n\ DO\ NOT\ MODIFY\!\r\n\ Read\ a\ TGF\ file\ and\ create\ an\ AdjListsGraphPlus<String>\ from\ it.\r\n\ \r\n\ @param\ tgfFile\ \ The\ TGF\ file\ to\ read\r\n\ @return\ A\ graph\ created\ from\ the\ TGF\ file\r\n\ @throws\ FileNotFoundException\ if\ TGF\ file\ is\ not\ found.\r\n
comment5.params=
comment5.target=GraphPlus\ clone()
comment5.text=\ \r\n\ Creates\ a\ new\ graph\ that\ has\ all\ the\ same\ vertices\ and\ arcs\ as\ the\ original.\r\n\ \r\n\ @return\ The\ new\ graph.\r\n
comment6.params=vertex
comment6.target=boolean\ isSink(java.lang.Object)
comment6.text=\r\n\ Checks\ if\ a\ vertex\ is\ a\ sink\ (points\ to\ no\ other\ vertex)\r\n\ \r\n\ @param\ vertex\:\ the\ potential\ sink\ vertex\r\n\ @return\ true\ if\ the\ vertex\ is\ a\ sink,\ false\ if\ it\ is\ not.\r\n\ @throws\ IllegalArgumentException\ if\ given\ vertex\ is\ not\ in\ graph\r\n
comment7.params=
comment7.target=java.util.LinkedList\ allSinks()
comment7.text=\r\n\ Retrieves\ the\ vertices\ that\ are\ sinks.\ \r\n\ \r\n\ @return\ all\ the\ sinks\ in\ a\ linked\ list.\r\n
comment8.params=vertex
comment8.target=boolean\ isSource(java.lang.Object)
comment8.text=\r\n\ Checks\ if\ a\ vertex\ is\ a\ source\ (no\ vertex\ points\ to\ it)\r\n\ \r\n\ @param\ \ vertex\ \ The\ potential\ source\ vertex.\r\n\ @return\ True\ if\ the\ vertex\ is\ a\ source,\ false\ if\ it\ is\ not.\r\n\ @throws\ IllegalArgumentException\ if\ given\ vertex\ is\ not\ in\ graph.\r\n
comment9.params=
comment9.target=java.util.LinkedList\ allSources()
comment9.text=\r\n\ Retrieves\ the\ vertices\ that\ are\ sources\r\n\ \r\n\ @return\ All\ the\ sources\ in\ a\ linked\ list\r\n
numComments=16
